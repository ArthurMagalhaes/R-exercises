x
}
f1(count)
f1 <- function(t){
x <- c()
for (i in t){
a <- exp(i)
if (a > 1000){
x <- c(x, a)
}
}
print(x)
}
f1(count)
count = seq(100)
f1(count)
count = seq(100)
f1 <- function(sequence){
x <- c()
for (i in sequence){
a <- exp(i)
if (a > 1000){
x <- c(x, a)
}
}
for (i in sequence){
print(x)
}
}
for (i in sequence){
print(x)
}
f1 <- function(t){
x <- c()
for (i in t){
a <- exp(i)
if (a > 1000){
x <- c(x, a)
}
}
for (i in t){
print(x)
}
}
f1(count)
f1 <- function(t){
x <- c()
for (i in t){
a <- exp(i)
if (a > 1000){
x <- c(x, a)
}
}
for (i in t){
print(x[i])
}
}
f1(count)
f1 <- function(t){
x <- c()
for (i in t){
a <- exp(i)
if (a > 1000){
x <- c(x, a)
}
}
for (i in x){
print(i)
}
}
f1(count)
x <- c(12, 53, 27, 18)
rep(x)
rep(x, 3)
f4 <- function(column){
rows <- c()
for (c in column){
rows <- c(rows, 2*c, 3*c, 4*c)
}
m <- matrix(rows, length(column), 3, byrow = TRUE)
}
x <- c(12, 53, 27, 18)
f4(x)
f4(x)
print(f4(x))
x.name
x <- c(7, 8, 4, 0, 6, 11, 0, 7, 3, 0)
names(x)
f5 <- function(x){
count = 0
for (i in x){
if (i==0){
count <- count + 1
}
}
j = 0
k <- length(x)
if (count >= 2){
for (i in 1:k){
if (x[i]==0){
j = i
break()
}
}
}
if (j > 0){
sprintf("O vetor contém %d zeros e o primeiro está na posição %d.", count, j)
}
else {
print("O vetor contém menos do que dois zeros")
}
}
x <- c(7, 8, 4, 0, 6, 11, 0, 7, 3, 0)
f5(x)
f8 <- function(num){
if((num%%3==0) & (num%%5==0) & (num%%7==0)){
sprintf("%d é múltiplo de 105!", num)
}
else{
sprintf("%d não é múltiplo de 105!", num)
}
}
f8(37)
f8(210)
f9 <- function(num){
t <- seq(2, 2*num, 2)
x <- sum()t
}
f9 <- function(num){
t <- seq(2, 2*num, 2)
x <- sum(t)
}
f9(7)
f9 <- function(num){
t <- seq(2, 2*num, 2)
x <- sum(t)
print(x)
}
f9(7)
f9 <- function(num){
t <- seq(2, 2*num, 2)
x <- 0
for (j in t){
x <- x + j
}
print(x)
}
f9(7)
f10 <- function(k){
x <- 1:k
for (i in 1:k)
{x[i] <- i*(i+1)/2}
p <- prod(x)
print(p)
}
f10(5)
%+% <- function(a, b) {(a^2+b^2) / (a+b-1)}
%^% <- function(a, b) {exp(a+b+a*b)}
"%+%" <- function(a, b) {(a^2+b^2) / (a+b-1)}
"%^%" <- function(a, b) {exp(a+b+a*b)}
"%*%" <- function(a, b) {t = (a+b)/(a*b) if (t > 0) {return(t)} else {return(-t)}}
"%x%" <- function(a, b) {(a+b)/(a*b)}
"%*%" <- function(a, b) {(2*(a%x%b)-1)*(a%x%b)}
2%+%3
1%^%1
-7%*%13
-7%x%13
"%*%" <- function(a, b) {(2*((a%x%b)>0)-1)*(a%x%b)}
-7%*%13
21/3*7
"%fuck%" <- function(a, b) { if (a > b) {print("Go fuck yourself!")} else {print("Fuck you!")}}
5%fuck%10
5%fuck%3
"%fuck%" <- function(a, b) {t<- (a-b) if (a > b) {print("Go fuck yourself!")} else {print("Fuck you!")}}
"%fuck%" <- function(a, b) { if (a > b) {print("Go fuck yourself!")} else {print("Fuck you!")}}
cities <- c()
cities[1] <- "London"
cities[2] <- "Paris"
cities[3] <- "Rome"
cities[4] <- "Athens"
print(cities)
x <- 1:10
x <- as.character(x)
print(x)
print("I like apples very much.", quote = FALSE)
fuck <- function(a, b){
t = a-b
if (a>b){
print("Go fuck yourself!")
}
else {
print("Fuck you!")
}
}
"%fuck%" <- fuck()
"%fuck%" <- fuck(a, b)
fuck <- function(){
print("Go fuck yourself!")
}
"%fuck%" <- fuck(a, b)
"%fuck%" <- fuck()
print("I like apples very much.", quote = FALSE)
noquote("I like apples very much.")
noquote("I like apples very much.", quote = TRUE)
quote("I like Apples very much.")
library(highr)
x = c(7, 22, -9, 14, 6)
rep(x, each=4)
x<- 25.13499517
print(format(x, digits = 5))
print(format(x, nsmall = 6))
x <- 15
y = 5
sprintf("By dividing %d by %d we get %.2f.", x, y, x/y)
sprintf("By dividing %d by %d we get %.2f.", x, y, x/y, quote = FALSE)
x <- 132.48349587015
sprintf("%.5f", x)
sprintf("+.6", x)
sprintf("%e", x)
x <- 132.48349587015
sprintf("%.5f", x)
sprintf("+.6f", x)
sprintf("%e", x)
sprintf("%+.6f", x)
sprintf("%.9g", x)
paste(x, y)
x <- c("car", "train", "airplane", "ship")
y <- c("road", "railroad", "air", "Water")
paste(x, y)
paste(x, y, sep = ",")
paste(x, y, collapse = "*")
paste(x, y, sep = ",", collapse = "_")
cat(x, y)
cat(x, y, sep = "#")
x <- "I learn how to write code in R."
x <- replace(x, "e", "w")
x <- replace(x, "h", "--")
x <- replace(x, "ow", "#\")
x
x <- replace(x, "ow", "#\")
print(x)
x <- "I learn how to write code in R."
x <- chartr(x, "e", "w")
x <- chartr(x, "h", "--")
x <- chartr(
x <- "I learn how to write code in R."
x <- chartr(x, "e", "w")
x <- chartr(x, "h", "--")
x <- chartr(x, "ow", "#\")
print(x)
x <- "I learn how to write code in R."
x <- chartr(x, "e", "w")
x <- "I learn how to write code in R."
x <- chartr("e", "w", x)
x <- chartr("h", "--", x)
x <- chartr("ow", "#\", x)
print(x)
print(x)
x <- chartr("ow", "#\", x)
x <- chartr("ow", "#\", x)
print(x)
print(x)
x
gyjfhl
x <- "I learn how to write code in R."
x <- chartr("e", "w", x)
x <- chartr("h", "--", x)
print(x)
x <- chartr("ow", "#\", x)
x <- "I learn how to write code in R."
x <- chartr("e", "w", x)
x <- chartr("h", "--", x)
x <- chartr("ow", "#\\", x)
print(x)
x <- "I learn how to write code in R."
x <- chartr("e", "w", x)
x <- chartr("h", "--", x)
print(x)
x <- sample(1:200, 15, replace = TRUE)
m6 <- matrix(x, nrow = 3, byrow = TRUE, dimnames = list(c('a', 'b', 'c'), letters[1:5]))
m6
x <- sample(1:200, 15, replace = TRUE)
m6 <- matrix(x, nrow = 3, byrow = TRUE, dimnames = list(c('a', 'b', 'c'), letters[1:5]))
m6
m15a <- matrix(sample(30, 8), nrow = 2)
m15b <- matrix(sample(10:42, 12,  replace = TRUE), ncol = 3, byrow = TRUE)
m15a
m15b
m15c <- m15a %*% m15b
m15c
m15a <- matrix(sample(30, 8), nrow = 2)
m15b <- matrix(sample(10:42, 12,  replace = TRUE), ncol = 3, byrow = TRUE)
m15a
m15b
m15c <- m15a %*% m15b
m15c
m16 <- matrix(sample(100, 16), nrow = 4, byrow = TRUE)
det(m16)
m16
diag(m16)
solve(m16)
m16 %*% solve(m16)
diag(m18) <- c(23, 4, 51, 69, 14, 36)
m18
m18 <- matrix(0, nrow = 6, ncol = 6)
diag(m18) <- c(23, 4, 51, 69, 14, 36)
m18
m19 <- matrix(0, 10, 10)
m19
m19 <- matrix(0, 10, 10)
diag(m19) <- rep(1, 10)
m19
r <- matrix(rnorm(12, 2, 5), nrow = 3)
s <- matrix(rnorm(12, 3, 4), ncol = 4, byrow = TRUE)
r
s
m20 <- array(c(r, s))
m20
m20[,,1]
m20 <- array(c(r, s), dim = c(3, 4, 2))
m20[,,1]
m20[,2,1]
m20[2,3,1]
m20[3,,]
m20[,2,]
t(m20[3,,])
m20[1,4,]
x <- list(bands=c('Pink Floyd', 'The Offspring', 'AC/DC'),
albums=c('The Wall', 'Conspiracy of One', 'High Voltage'),
years=c(1979, 2000, 976))
x
f1 <- factor(c(3,2,2,1,3,2,1,1,3,1), labels = c('Adidas', 'Nike', 'Reebok'))
f1
f2 <- factor(c(3,2,2,1,3,2,1,1,3,1), levels = c(2, 3, 1), labels = c('Adidas', 'Nike', 'Reebok'))
f2
f3 <- factor(c(3,2,2,1,3,2,1,1,3,1), levels = c(2, 3, 1, 4),
labels = c('Adidas', 'Nike', 'Reebok', 'Puma'))
f3
length(f3)
f3[12] <- 'Puma'
f3
f3[11] <- 'Puma'
f3
f4 <- ordered(c(4, 2, 2, 3, 1, 3, 4, 3, 2, 1, 4, 4, 3, 2, 2),
labels = c('not satisfied', 'somewhat satisfied', 'satisfied', 'very satisfied'))
f4
f5 <- ordered(c(4, 2, 2, 3, 1, 3, 4, 3, 2, 1, 4, 4, 3, 2, 2),
labels = c('not satisfied', 'somewhat satisfied',
'satisfied', 'very satisfied', 'extremely satisfied'))
f5
f5 <- ordered(c(4, 2, 2, 3, 1, 3, 4, 3, 2, 1, 4, 4, 3, 2, 2),
labels = c('not satisfied', 'somewhat satisfied',
'satisfied', 'very satisfied'))
f5
f5 <- ordered(c(4, 2, 2, 3, 1, 3, 4, 3, 2, 1, 4, 4, 3, 2, 2), levels =  1:5
labels = c('not satisfied', 'somewhat satisfied',
'satisfied', 'very satisfied', 'extremely satisfied'))
f5
W
f5
f5 <- ordered(c(4, 2, 2, 3, 1, 3, 4, 3, 2, 1, 4, 4, 3, 2, 2), levels =  1:5,
labels = c('not satisfied', 'somewhat satisfied',
'satisfied', 'very satisfied', 'extremely satisfied'))
f5
f5[16:17] <- 'extremely satisfied'
f5
sample(4, 30)
x <- sample(100, 30, replace = TRUE)
f6 <- factor(sample(4, 30, replace = TRUE))
x
f6
soma = function(e, p){
soma = 0
for (i in 1:3){
soma += p[i] * e[i]
}
}
soma = function(e, p){
soma = 0
for (i in 1:3){
soma = soma + p[i] * e[i]
}
}
entradas = c(1, 7, 5)
pesos = c(0.8, 0.1, 0)
soma = function(e, p){
soma = 0
l = length(e)
for (i in 1:l){
soma = soma + p[i] * e[i]
}
soma
}
s = soma(entradas, pesos)
step = function(n){
if (n>=1){
return(1)
}
return(0)
}
r = step(s)
entradas = matrix(c(0, 0, 0, 1, 1, 0, 1, 1), ncol = 2, byrow = TRUE)
saidas = c(0, 0, 0, 1)
View(entradas)
soma = function(input, weights){
return (input %*% weights)
}
step = function(value){
if (value>=1){
return(1)
}
return(0)
}
atualizaPesos = function(input, weights, learning_rate, error){
x <- c()
l = length(weights)
for (i in 1:l){
x <- c(x, weights[i] + learning_rate * error * input[i])
}
x
}
soma = function(input, weights){
return (input %*% weights)
}
step = function(value){
if (value>=1){
return(1)
}
return(0)
}
atualizaPesos = function(input, weights, learning_rate, error){
x <- c()
l = length(weights)
for (i in 1:l){
x <- c(x, weights[i] + learning_rate * error * input[i])
}
x
}
treinamento = function(ages, input, output, weights, learning_rate){
s = length(input)
for (i in seq(ages)){
for (j in seq(s)){
e = step((input[j,] %*% weights)[1]) - output[j]
weights = atualizaPesos(input[j,] weights, learning_rate = learning_rate, e)
}
}
return(weights)
}
treinamento = function(ages, input, output, weights, learning_rate){
s = length(input)
for (i in seq(ages)){
for (j in seq(s)){
out <- input[j,] %*% weights
e = step(out[1]) - output[j]
weights = atualizaPesos(input[j,] weights, learning_rate = learning_rate, e)
}
}
return(weights)
}
treinamento = function(ages, input, output, weights, learning_rate){
s = length(input[1,])
for (i in seq(ages)){
for (j in seq(s)){
out <- input[j,] %*% weights
e = step(out[1]) - output[j]
weights = atualizaPesos(input[j,] weights, learning_rate = learning_rate, e)
}
}
return(weights)
}
treinamento = function(ages, input, output, weights, learning_rate){
s = length(input[1,])
for (i in seq(ages)){
for (j in seq(s)){
out <- input[j,] %*% weights
e = step(out[1]) - output[j]
weights = atualizaPesos(input[j,], weights, learning_rate = learning_rate, e)
}
}
return(weights)
}
entradas = matrix(c(0, 0, 0, 1, 1, 0, 1, 1), ncol = 2, byrow = TRUE)
saidas = c(0, 0, 0, 1)
epocas = 1000
pesos = c(0.1, 0.1, 0.3, 0.2)
resultado = treinamento(epocas, entradas, saidas, pesos, 0.3)
entradas[1]
View(entradas)
entradas[1,]
typeof(entradas[1,])
pesos
resultado = treinamento(epocas, entradas, saidas, pesos, 0.3)
k <- entradas[1,] %*% pesos
pesos = c(0.1, 0.1)
resultado = treinamento(epocas, entradas, saidas, pesos, 0.3)
resultado
atualizaPesos = function(input, weights, learning_rate, error){
x <- c()
l = length(weights)
for (i in 1:l){
x <- c(x, weights[i] + learning_rate * error * input[i])
}
return(x)
}
resultado = treinamento(epocas, entradas, saidas, pesos, 0.3)
k <- entradas[1,] %*% pesos
View(k)
k
k[1]
k[1] <- entradas[4,] %*% pesos
k[1]
setwd("~/Documentos/GitHub/R-Exercises")
